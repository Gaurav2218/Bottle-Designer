{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\bottle-visualization\\\\bottle-visualization\\\\frontend\\\\src\\\\components\\\\BottleCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BottleCanvas = ({\n  texture\n}) => {\n  _s();\n  const canvasRef = useRef();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0xeeeeee); // Set background color to light grey (or any color you prefer)\n    camera.position.z = 8;\n\n    // Add bottle geometry\n    const geometry = new THREE.CylinderGeometry(1, 1, 3, 15);\n    const material = new THREE.MeshStandardMaterial();\n    const bottle = new THREE.Mesh(geometry, material);\n    scene.add(bottle);\n\n    // Add ambient light (even light from all directions)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1); // Bright white light\n    scene.add(ambientLight);\n\n    // Add point light (focused light, adjust its intensity and position)\n    const pointLight = new THREE.PointLight(0xffffff, 1.5, 10); // Increased intensity\n    pointLight.position.set(5, 5, 5); // Position to illuminate from above and at an angle\n    scene.add(pointLight);\n\n    // Apply texture when available\n    if (texture) {\n      const loader = new THREE.TextureLoader();\n      loader.load(texture, loadedTexture => {\n        bottle.material.map = loadedTexture;\n        bottle.material.needsUpdate = true;\n      });\n    }\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      bottle.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => renderer.dispose();\n  }, [texture]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n_s(BottleCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = BottleCanvas;\nexport default BottleCanvas;\nvar _c;\n$RefreshReg$(_c, \"BottleCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","BottleCanvas","texture","_s","canvasRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","current","setSize","setClearColor","position","z","geometry","CylinderGeometry","material","MeshStandardMaterial","bottle","Mesh","add","ambientLight","AmbientLight","pointLight","PointLight","set","loader","TextureLoader","load","loadedTexture","map","needsUpdate","animate","requestAnimationFrame","rotation","y","render","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/bottle-visualization/bottle-visualization/frontend/src/components/BottleCanvas.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst BottleCanvas = ({ texture }) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n        const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0xeeeeee); // Set background color to light grey (or any color you prefer)\n        camera.position.z = 8;\n\n        // Add bottle geometry\n        const geometry = new THREE.CylinderGeometry(1, 1, 3, 15);\n        const material = new THREE.MeshStandardMaterial();\n        const bottle = new THREE.Mesh(geometry, material);\n        scene.add(bottle);\n\n        // Add ambient light (even light from all directions)\n        const ambientLight = new THREE.AmbientLight(0xffffff, 1); // Bright white light\n        scene.add(ambientLight);\n\n        // Add point light (focused light, adjust its intensity and position)\n        const pointLight = new THREE.PointLight(0xffffff, 1.5, 10); // Increased intensity\n        pointLight.position.set(5, 5, 5); // Position to illuminate from above and at an angle\n        scene.add(pointLight);\n\n        // Apply texture when available\n        if (texture) {\n            const loader = new THREE.TextureLoader();\n            loader.load(texture, (loadedTexture) => {\n                bottle.material.map = loadedTexture;\n                bottle.material.needsUpdate = true;\n            });\n        }\n\n        // Animation loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n            bottle.rotation.y += 0.01;\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        return () => renderer.dispose();\n    }, [texture]);\n\n    return <canvas ref={canvasRef} />;\n};\n\nexport default BottleCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}