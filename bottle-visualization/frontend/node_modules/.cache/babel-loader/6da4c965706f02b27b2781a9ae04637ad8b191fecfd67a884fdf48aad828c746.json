{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\bottle-visualization\\\\bottle-visualization\\\\frontend\\\\src\\\\components\\\\BottleCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BottleCanvas = ({\n  texture\n}) => {\n  _s();\n  const canvasRef = useRef();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.position.z = 8;\n\n    // Add bottle geometry\n    const geometry = new THREE.CylinderGeometry(1, 1, 3, 15);\n    const material = new THREE.MeshStandardMaterial();\n    const bottle = new THREE.Mesh(geometry, material);\n    scene.add(bottle);\n\n    // Add light\n    const light = new THREE.PointLight(0xffffff, 1, 10);\n    light.position.set(1, 1, 1);\n    light.position.x = 5;\n    scene.add(light);\n\n    // Apply texture when available\n    if (texture) {\n      const loader = new THREE.TextureLoader();\n      loader.load(texture, loadedTexture => {\n        bottle.material.map = loadedTexture;\n        bottle.material.needsUpdate = true;\n      });\n    }\n    const animate = () => {\n      requestAnimationFrame(animate);\n      bottle.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => renderer.dispose();\n  }, [texture]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n_s(BottleCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = BottleCanvas;\nexport default BottleCanvas;\nvar _c;\n$RefreshReg$(_c, \"BottleCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","BottleCanvas","texture","_s","canvasRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","current","setSize","position","z","geometry","CylinderGeometry","material","MeshStandardMaterial","bottle","Mesh","add","light","PointLight","set","x","loader","TextureLoader","load","loadedTexture","map","needsUpdate","animate","requestAnimationFrame","rotation","y","render","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/bottle-visualization/bottle-visualization/frontend/src/components/BottleCanvas.js"],"sourcesContent":["\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst BottleCanvas = ({ texture }) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n        const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        camera.position.z = 8;\n\n        // Add bottle geometry\n        const geometry = new THREE.CylinderGeometry(1, 1, 3, 15);\n        const material = new THREE.MeshStandardMaterial();\n        const bottle = new THREE.Mesh(geometry, material);\n        scene.add(bottle);\n\n        // Add light\n        const light = new THREE.PointLight(0xffffff, 1, 10);\n        light.position.set(1,1,1);\n        light.position.x=5;\n        scene.add(light);\n\n        // Apply texture when available\n        if (texture) {\n            const loader = new THREE.TextureLoader();\n            loader.load(texture, (loadedTexture) => {\n                bottle.material.map = loadedTexture;\n                bottle.material.needsUpdate = true;\n            });\n        }\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            bottle.rotation.y += 0.01;\n            renderer.render(scene, camera);\n        };\n        animate();\n\n        return () => renderer.dispose();\n    }, [texture]);\n\n    return <canvas ref={canvasRef} />;\n};\n\nexport default BottleCanvas;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAMC,SAAS,GAAGP,MAAM,CAAC,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACZ,MAAMS,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIT,KAAK,CAACU,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC;IAC/F,MAAMC,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAa,CAAC;MAAEC,MAAM,EAAEV,SAAS,CAACW;IAAQ,CAAC,CAAC;IAEvEH,QAAQ,CAACI,OAAO,CAACP,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDJ,MAAM,CAACU,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IACxD,MAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,oBAAoB,CAAC,CAAC;IACjD,MAAMC,MAAM,GAAG,IAAIzB,KAAK,CAAC0B,IAAI,CAACL,QAAQ,EAAEE,QAAQ,CAAC;IACjDhB,KAAK,CAACoB,GAAG,CAACF,MAAM,CAAC;;IAEjB;IACA,MAAMG,KAAK,GAAG,IAAI5B,KAAK,CAAC6B,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;IACnDD,KAAK,CAACT,QAAQ,CAACW,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACzBF,KAAK,CAACT,QAAQ,CAACY,CAAC,GAAC,CAAC;IAClBxB,KAAK,CAACoB,GAAG,CAACC,KAAK,CAAC;;IAEhB;IACA,IAAIxB,OAAO,EAAE;MACT,MAAM4B,MAAM,GAAG,IAAIhC,KAAK,CAACiC,aAAa,CAAC,CAAC;MACxCD,MAAM,CAACE,IAAI,CAAC9B,OAAO,EAAG+B,aAAa,IAAK;QACpCV,MAAM,CAACF,QAAQ,CAACa,GAAG,GAAGD,aAAa;QACnCV,MAAM,CAACF,QAAQ,CAACc,WAAW,GAAG,IAAI;MACtC,CAAC,CAAC;IACN;IAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;MAClBC,qBAAqB,CAACD,OAAO,CAAC;MAC9Bb,MAAM,CAACe,QAAQ,CAACC,CAAC,IAAI,IAAI;MACzB3B,QAAQ,CAAC4B,MAAM,CAACnC,KAAK,EAAEE,MAAM,CAAC;IAClC,CAAC;IACD6B,OAAO,CAAC,CAAC;IAET,OAAO,MAAMxB,QAAQ,CAAC6B,OAAO,CAAC,CAAC;EACnC,CAAC,EAAE,CAACvC,OAAO,CAAC,CAAC;EAEb,oBAAOF,OAAA;IAAQ0C,GAAG,EAAEtC;EAAU;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrC,CAAC;AAAC3C,EAAA,CA3CIF,YAAY;AAAA8C,EAAA,GAAZ9C,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}